


<style>
  .form-container {
    visibility: hidden;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .StyledFileUpload-sc-1rodjgn-0 {
    color: #fff !important;
    border: #fff;
  }

  .form-container.ready {
    visibility: visible;
    opacity: 1;
  }

  /* Apply color to description text */
  .cmCBdM {
    color: #ffffff; /* Replace with your desired color */
  }

  .Hputu {
    color: #fff;
    border: solid 1px #fff;
  }

  /* Breadcrumbs styling */
  .breadcrumbs {
    padding: 10px 40px 10px 40px;
  }

  /* Default Styles */
  .section.hero-contact {
    background-color: {{settings.brand_color_darkblue}}; /* Default Black background */
    color: {{settings.brand_color_white}}; /* White text color for contrast */
    text-align: left; /* Ensure the title is left-aligned */
  }

  /* Center the form and set the max width */
  .form {
    background-color: {{settings.brand_color_darkblue}}; /* Default Black background */
    color: {{settings.brand_color_white}}; /* White text color for contrast */
    padding: 40px; /* Increased padding around the form */
    border-radius: 8px; /* Optional: rounded corners */
    max-width: 600px; /* Maximum width for the form */
    margin: 10px; /* Margin to left align form */
  }

  /* Apply white text specifically to form titles */
  .form h1, .form h2, .form h3, .form label {
    color: #fff;
  }

  /* Media query for mobile devices */
  @media (max-width: 768px) {
    .form {
      margin: 0 auto; /* Center the form on mobile */
      text-align: center; /* Center the text inside the form */
    }

    .form-container {
      display: flex;
      justify-content: center; /* Center the form container */
      align-items: center;
      flex-direction: column;
    }
  }
</style>

 


    {{!--{{breadcrumbs}}--}}

    <section id="main-content" class="section hero-contact">
        <div class="hero-inner">
            <h1 class="intro-title-contact">{{t 'submit_a_request'}}</h1>
            <h2 class="visibility-hidden">{{ t 'search' }}</h2>
        </div>
    </section>

    <div class="container-divider"></div>
 <p id="form-message"></p>
    <div class="container">
        <div class="sub-nav"></div>
        <div id="main-content" class="form">
            <div id="new-request-form"></div>
        </div>
    </div>

   <script>
    document.addEventListener('DOMContentLoaded', function() {
        const params = new URLSearchParams(window.location.search);
        const ticketFormId = params.get('ticket_form_id');

        if (ticketFormId) {
            fetch(`/api/v2/ticket_forms/${ticketFormId}.json`)
                .then(response => response.json())
                .then(data => {
                    const formName = data.ticket_form.name;
                    updatePageStyles(ticketFormId, formName);
                })
                .catch(() => {
                    console.error('Error fetching the form data');
                    updatePageStyles(ticketFormId, 'Submit a Request');
                });
        } else {
            updatePageStyles('default', 'Submit a Request');  // Fallback if no ticketFormId is found
        }
    });

    function updatePageStyles(ticketFormId, formTitle) {
        const heroElement = document.querySelector('.hero-contact');
        const formElement = document.querySelector('.form');
        const formMessageElement = document.getElementById('form-message');

        document.querySelector('.intro-title-contact').innerText = formTitle;

        // Map different form IDs to specific messages
        const formMessages = {
            '15525136863132': 'Please provide all necessary details for your request.',
            '15525228238620': 'Ensure all mandatory fields are filled in before submitting.',
            '15525177480220': 'We will respond to your request as soon as possible.',
            // Add more form-specific messages here
            'default': 'Please fill out the form below to submit your request.'
        };

        // Set the appropriate message based on the form ID
        const message = formMessages[ticketFormId] || formMessages['default'];
        formMessageElement.innerText = message;  // Insert the message above the form

        // Apply styles to hero section and form based on form ID
        switch(ticketFormId) {
            case '15525136863132':
                heroElement.style.backgroundColor = '#061b2b';
                heroElement.style.color = '#ffffff';
                formElement.style.backgroundColor = '#061b2b';
                formElement.style.color = '#ffffff';
                break;
            case '15525228238620':
                heroElement.style.backgroundColor = '#061b2b';
                heroElement.style.color = '#ffffff';
                applyTextColor(heroElement, '#ffffff');  // Ensure all hero text is #ffffff
                formElement.style.backgroundColor = '#061b2b';
                formElement.style.color = '#ffffff';
                applyTextColor(formElement, '#ffffff');  // Apply text color to all text within the form
                break;
            case '15525177480220':
                heroElement.style.backgroundColor = '#061b2b';
                heroElement.style.color = '#ffffff';
                formElement.style.backgroundColor = '#061b2b';
                formElement.style.color = '#ffffff';
                break;
            default:
                heroElement.style.backgroundColor = '#061b2b';
                heroElement.style.color = '#ffffff';
                formElement.style.backgroundColor = '#061b2b';
                formElement.style.color = '#ffffff';
                break;
        }

        // Apply styles to the form container
        formElement.style.padding = '40px'; // Ensure sufficient padding
        formElement.style.borderRadius = '8px'; // Optional: rounded corners
    }

    // Helper function to apply text color to all child elements within the hero and form
    function applyTextColor(element, color) {
        element.querySelectorAll('h1, h2, h3, p, label, span, div').forEach(function(child) {
            child.style.color = color;
        });
    }
</script>