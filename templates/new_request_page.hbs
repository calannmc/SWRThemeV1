 <style>
        /* Hide everything initially */
        body.loading {
            visibility: hidden;
        }

        /* Breadcrumbs styling */
        .breadcrumbs {
            padding: 10px 40px 10px 40px;
        }

        /* Default Styles */
        .section.hero-contact {
            background-color: #000;
            color: #fff;
            text-align: left; /* Ensure the title is left-aligned */
        }

        /* Center the form and set the max width */
        .form {
            background-color: #000; /* Default Black background */
            color: #fff; /* White text color for contrast */
            padding: 40px; /* Increased padding around the form */
            border-radius: 8px; /* Optional: rounded corners */
            max-width: 600px; /* Maximum width for the form */
            margin: 0 auto; /* Center the form */
        }

        /* Apply white text specifically to form titles */
        .form h1, .form h2, .form h3, .form label {
            color: #fff;
        }
    </style>
</head>
<body class="loading">
    {{breadcrumbs}}

    <section id="main-content" class="section hero-contact">
        <div class="hero-inner">
            <h1 class="intro-title-contact">{{t 'submit_a_request'}}</h1>
            <h2 class="visibility-hidden">{{ t 'search' }}</h2>
        </div>
    </section>

    <div class="container-divider"></div>

    <div class="container">
        <div class="sub-nav"></div>
        <div class="form-container">
            <div id="main-content" class="form">
                <div id="new-request-form"></div>
            </div>
        </div>
    </div>
<script>
    // Embed settings into a global object
    window.settings = {
        brandColor: '{{settings.brand_color}}'
    };
</script>

    <script>

document.addEventListener('DOMContentLoaded', function() {
    const params = new URLSearchParams(window.location.search);
    const ticketFormId = params.get('ticket_form_id');

    if (ticketFormId) {
        fetch(`/api/v2/ticket_forms/${ticketFormId}.json`)
            .then(response => response.json())
            .then(data => {
                const formName = data.ticket_form.name;
                updatePageStyles(ticketFormId, formName);
            })
            .catch(() => {
                console.error('Error fetching the form data');
                updatePageStyles(ticketFormId, 'Submit a Request');
            });
    } else {
        updatePageStyles(); // Call to ensure the page becomes visible
    }
});

function updatePageStyles(ticketFormId = null, formTitle = 'Submit a Request') {
    const heroElement = document.querySelector('.hero-contact');
    const formElement = document.querySelector('.form');

    document.querySelector('.intro-title-contact').innerText = formTitle;

    const brandColor = window.settings.brandColor; // Access the brand color from the global settings

    // Apply styles to hero section and form based on form ID
    switch(ticketFormId) {
        case '15525136863132':
            heroElement.style.backgroundColor = '#0092CB';
            heroElement.style.color = '#ffffff';
            formElement.style.backgroundColor = '#0092CB';
            formElement.style.color = '#ffffff';
            break;
        case '15525228238620':
            heroElement.style.backgroundColor = '#0092CB';
            heroElement.style.color = '#ffffff';
            applyTextColor(heroElement, '#ffffff');  // Ensure all hero text is #000000
            formElement.style.backgroundColor = '#0092CB';
            formElement.style.color = '#ffffff';
            applyTextColor(formElement, '#ffffff');  // Apply text color to all text within the form
            break;
        case '15525177480220':
            heroElement.style.backgroundColor = '#0092CB';
            heroElement.style.color = '#ffffff';
            formElement.style.backgroundColor = '#0092CB';
            formElement.style.color = '#ffffff';
            break;
        default:
            heroElement.style.backgroundColor = '#0092CB';
            heroElement.style.color = '#ffffff';
            formElement.style.backgroundColor = '#0092CB';
            formElement.style.color = '#ffffff';
            break;
    }

    // Show the page content after styles are applied
    document.body.classList.remove('loading');
    document.body.style.visibility = 'visible';
}

// Helper function to apply text color to all child elements within the hero and form
function applyTextColor(element, color) {
    element.querySelectorAll('h1, h2, h3, p, label, span, div').forEach(function(child) {
        child.style.color = color;
    });
}


            // Show the page content after styles are applied
            document.body.classList.remove('loading');
            document.body.style.visibility = 'visible';
        }

        // Helper function to apply text color to all child elements within the hero and form
        function applyTextColor(element, color) {
            element.querySelectorAll('h1, h2, h3, p, label, span, div').forEach(function(child) {
                child.style.color = color;
            });
        }
    </script>

    <script type="module">
        import { renderNewRequestForm } from "new-request-form";

        const container = document.getElementById("new-request-form");

        const settings = {{json settings}};

        const props = {
            requestForm: {{json new_request_form}},
            newRequestPath: {{json (page_path 'new_request')}},
            parentId: {{json parent.id}},
            parentIdPath: {{json parent.url}},
            locale: {{json help_center.locale}},
            baseLocale: {{json help_center.base_locale}},
            hasAtMentions: {{json help_center.at_mentions_enabled}},
            userRole: {{json user.role}},
            brandId: {{json brand.id}},
            wysiwyg: true,
            answerBotModal: {
                answerBot: {{json answer_bot}},
                hasRequestManagement: {{json help_center.request_management_enabled}},
                isSignedIn: {{json signed_in}},
                helpCenterPath: {{json (page_path 'help_center')}},
                requestsPath: {{json (page_path 'requests')}},
                requestPath: {{json (page_path 'request' id=answer_bot.request_id)}}
            },
        };

        renderNewRequestForm(settings, props, container);
    </script>